#!/usr/bin/env ruby

require 'ffi-rzmq'
require 'trollop'
require 'termite'

require "hastur"
require "hastur-server/trigger"
require "hastur-server/util"
require "hastur-server/message"

MultiJson.use :yajl

# This is a Hastur trigger worker.  It loads one or more files with
# Hastur triggers and accepts messages from a syndicator.  This will
# often be a Hastur syndicator but may be something else in case of
# testing or replaying messages.

STDERR.puts "LibZMQ version #{ZMQ::Util.version}"

opts = Trollop::options do
  opt :syndicator,  "Syndicator URI(s) (DEALER)", :type => String, :default => "tcp://0.0.0.0:4944", :multi => true
  opt :hastur_port, "Hastur UDP port",            :type => Integer, :default => 8150
  opt :triggers,    "Trigger pathname(s)",        :type => String, :multi => true
  opt :heartbeat,   "Heartbeat interval in sec",  :type => Integer, :default => 90
  opt :no_cassandra,"Don't use Cassandra state"
end

unless opts[:syndicator].flatten.all? { |uri| Hastur::Util.valid_zmq_uri? uri }
  Trollop::die :syndicator, "must be in this format: protocol://hostname:port"
end

Hastur.udp_port = opts[:hastur_port].to_i

logger = Termite::Logger.new
Hastur::Trigger::Context.logger = logger
ctx = ZMQ::Context.new

logger.info "Connecting Syndicator (DEALER) socket to #{opts[:syndicator].flatten}..."
syndicator_socket = Hastur::Util.connect_socket(ctx, ZMQ::DEALER, opts[:syndicator].flatten)
logger.debug "Syndicator socket returned: #{syndicator_socket}"

running = true

# set up signal handlers and hope to be able to get a clean shutdown
%w(INT TERM KILL).each do |sig|
  Signal.trap(sig) do
    logger.debug "Signal, shutting down..."
    running = false
    Signal.trap(sig, "DEFAULT")
  end
end

poller = ZMQ::Poller.new
poller.register_readable(syndicator_socket)

# Do initial handshake

# Hang out in a loop and do this as long as necessary until the other
# end is available.
logger.debug "Starting handshake..."
loop do
  logger.debug "Send handshake on syndicator socket"
  result = Hastur::Util.send_strings(syndicator_socket, [ "handshake" ])
  logger.debug "Sent handshake start, result: #{result.inspect}"
  poller.poll(5000)  # 5 seconds
  if poller.readables.include?(syndicator_socket)
    data = Hastur::Util.recv_strings(syndicator_socket)
    raise "Handshake failed: #{data.inspect}" unless data[0] == "handshake_confirm"
    logger.debug "Received handshake successfully"
    break
  else
    logger.info "No handshake yet, looping"
  end
end

logger.info "Handshake confirmed by Syndicator"

SUBSCRIPTIONS = {}

if opts[:no_cassandra]
  Hastur::Trigger::Context.cassandra = false
end

Hastur::Trigger::Context.on_subscribe do |context, sub_id, filter_opts|
  rc = Hastur::Util.send_strings(syndicator_socket, [ "subscribe", sub_id, MultiJson.dump(filter_opts) ])
  raise "Failed sending subscription: #{sub_id}, #{filter_opts.inspect}!" unless rc

  SUBSCRIPTIONS[sub_id] = filter_opts
end

# Load triggers, subscribe to message stream
opts[:triggers].flatten.each do |file|
  if file[0] == "/"
    require file
  else
    require_relative File.join("..", file)
  end
end

last_heartbeat = Time.now
poller = ZMQ::Poller.new
poller.register_readable syndicator_socket

while running
  poller.poll_nonblock

  if poller.readables.include?(syndicator_socket)
    messages = Hastur::Util.read_strings(syndicator_socket)
    unless messages
      logger.warn "Failed receiving messages!"
      next
    end

    if messages[0] == "handshake_confirm"
      local_subs = SUBSCRIPTIONS.keys.sort.join(",")
      logger.debug "Received handshake/heartbeat confirmation, subscriptions: #{messages[1]}"

      if local_subs != messages[1]
        STDERR.puts "**** Subscriptions don't match!\n  Local: #{local_subs}\n  Server: #{messages[1]}"
      end

      next
    end

    if messages[0] == "subscription_confirm"
      logger.debug "Confirmed subscription, ID #{messages[1]}"
      # Yay!
      next
    end

    subs = messages[-3].split(",")
    envelope = messages[-2]
    body = messages[-1]

    subs.each do |sub_id|
      logger.debug "Message from firehose: #{body}"
      Hastur::Trigger::Context.message_from_firehose(sub_id, envelope, body)
    end
  end

  if Time.now - last_heartbeat > opts[:heartbeat]
    # Handshakes and heartbeat are basically the same thing.
    # It means we get a confirmation we may not need, but
    # it also means we can restart the worker or server
    # without worrying too much about which is which.
    Hastur::Util.send_strings syndicator_socket, ["handshake"]
    last_heartbeat = Time.now
  end

  sleep 0.1 if poller.readables.empty?
end
