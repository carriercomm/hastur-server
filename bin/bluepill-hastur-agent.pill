# hastur-agent bluepill
require 'hastur-server/ooyala_config'
require 'fileutils'
require 'uuid'

NO_PRIVILEGE = Process.uid != 0
UUID_FILE = "/etc/uuid" # Default location of the system's UUID
HOME_UUID_FILE = "#{ENV['HOME']}/.hastur/uuid" # Alternate UUID location

# Other sites should replace this with their own list, either by
# creating a custom Hastur::MyConfig or just by setting ROUTERS
# to a list of ZeroMQ URIs.
routers = []
# If present, HASTUR_ROUTERS should be of the form:
#     tcp://127.0.0.1:8126;tcp://hastur-core1.us-east-1.ooyala.com:8126
if ENV['HASTUR_ROUTERS']
  routers = ENV['HASTUR_ROUTERS'].split(";")
else
  routers = Hastur::OoyalaConfig.get_routers
end

if NO_PRIVILEGE
  # If you're not root and running --no-privileged, put pids in your home dir
  RUNDIR="#{ENV['HOME']}/.hastur"
elsif File.directory? "/run"
  # modern Linux boxes use /run
  RUNDIR="/run/hastur"
else
  RUNDIR="/var/run/hastur"
end
FileUtils.mkdir_p RUNDIR
FileUtils.chown 'role-hastur', 'role-hastur', RUNDIR unless NO_PRIVILEGE

hastur_dir = NO_PRIVILEGE ? File.expand_path(".") : "/opt/hastur"

uuid = nil
if File.readable?(UUID_FILE) and File.size(UUID_FILE) == 37
  uuid = File.read(UUID_FILE).chomp
elsif File.readable?(HOME_UUID_FILE) and File.size(HOME_UUID_FILE) == 37
  uuid = File.read(HOME_UUID_FILE).chomp
else
  uuid = UUID.new.generate
  if File.writable?(UUID_FILE) or File.writable?(File.dirname(UUID_FILE))
    File.open(UUID_FILE, "w") { |file| file.puts uuid }
  elsif File.writable?(HOME_UUID_FILE) or File.writable?(File.dirname(HOME_UUID_FILE))
    File.open(HOME_UUID_FILE, "w") { |file| file.puts uuid }
  end
end

if !uuid || uuid.empty?
  raise "Can't find a UUID specification!  Add ~/.hastur/uuid or /etc/uuid!"
end

# These conditions tell whether a given environment variable is "ruby-related".
# I stole them from the rvmsudo script.
ENV_RUBY = [
  /^rvm/i,
  /^rbenv/i,
  /^gemset/,
  /^http_/,
  #/^PATH/,   # Don't just use the user's path
  /^IRBRC/,
  "RUBY",
  "GEM",
]

# If running unprivileged, we probably want to run with the current
# ruby interpreter, gems, etc.  That means passing through a bunch
# of environment variables that Bluepill won't use by default.
ruby_path = ""
env_extra = {}
if NO_PRIVILEGE
  ruby_path = RbConfig::CONFIG["bindir"] + ":"
  ENV.each do |name, value|
    env_extra[name] = ENV[name] if ENV_RUBY.any? { |r| name[r] }
  end
end

START_CMD = "#{hastur_dir}/bin/hastur-agent.rb --uuid #{uuid} " +
              routers.map { |r| "--router #{r}" }.join(' ')

# If we don't specify a log file, we get syslog logging to LOCAL6 by default.
Bluepill.application("hastur_agent") do |app|
  app.process("hastur_agent") do |process|
    process.environment = {
      "PATH" => "#{ruby_path}#{hastur_dir}/bin:/opt/local/bin:" +
                  "/usr/local/bin:/usr/local/sbin:/bin:/usr/bin:/sbin:/usr/sbin",
      "LD_LIBRARY_PATH" => "/opt/hastur/lib",
    }
    process.start_command = START_CMD
    process.stop_signals = [:quit, 15.seconds, :term, 5.seconds, :kill]
    process.working_dir = "/"
    process.pid_file = "#{RUNDIR}/hastur-agent.pid"
    process.uid = "role-hastur" unless NO_PRIVILEGE
    process.gid = "role-hastur" unless NO_PRIVILEGE
    process.daemonize = true
    process.start_grace_time = 5.seconds
    process.stop_grace_time = 30.seconds
    process.restart_grace_time = 45.seconds
    process.checks :mem_usage, :every => 120.seconds, :below => 100.megabytes, :times => [3,5]
    process.checks :flapping, :times => 2, :within => 30.seconds, :retry_in => 15.seconds
  end
end

# vim: ft=ruby
