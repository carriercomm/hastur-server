#!/usr/bin/env ruby

require 'ffi-rzmq'
require 'yajl'
require 'multi_json'
require 'trollop'
require 'termite'
require "httparty"

require "hastur-server/util"
require "hastur-server/message"

require "hastur"

MultiJson.use :yajl

# This communicates with one or more Trigger syndicators, resending
# them events from a file or the Hastur query server.

opts = Trollop::options do
  opt :firehose,      "Firehose URI (PUB)",       :type => String, :default => "tcp://0.0.0.0:8128"
  opt :json_files,    "JSON message pathname(s)", :type => String, :multi => true
  opt :query_server,  "Query server URI",         :type => String
  opt :uuid,          "UUID of messages",         :type => String, :multi => true
  opt :type,          "Message type to query",    :type => String
  opt :initial_delay, "Initial delay (in secs)",  :type => Float,  :default => 5.0
  opt :replay_delay,  "Replay with delay (secs)", :type => Float
  opt :start_ts,      "Starting query time"
  opt :end_ts,        "Ending query time"
end

json_items = []

raise "Must supply a json file or a query server!" unless opts[:json_files] || opts[:query_server]
raise "Need to supply a UUID to query messages from server!" unless opts[:uuid]

opts[:json_files].flatten.each do |file|
  cont = File.read(file)

  json_data = MultiJson.load(cont)
  raise "Cannot parse as json!  Body: #{response.body}" unless hash

  raise "JSON contains wrong type!" unless json_data.is_a?(Array)

  json_items += json_data
end

if opts[:query_server]
  url = "http://#{opts[:query_server]}/data/#{opts[:type]}/json?start=#{opts[:start_ts]}&end=#{opts[:end_ts]}"
  urls = []

  opts[:uuid].flatten.each do |uuid|
    urls << "#{url}&uuid=#{uuid}"
  end

  response = HTTParty.get(url)
  raise "Error from query server: #{response.body}" if response.status < 200 || response.status >= 300

  json_data = MultiJson.load(response.body)
  raise "Cannot parse as json!  Body: #{response.body}" unless hash

  raise "JSON contains wrong type!" unless json_data.is_a?(Array)

  json_items += json_data
end

ctx = ZMQ::Context.new
firehose_socket = Hastur::Util.bind_socket(ctx, ZMQ::PUB, [opts[:firehose]].flatten, :hwm => 10000)

count = 0

puts "Firehose on #{[opts[:firehose]].flatten} is ready."

puts "Sleeping #{opts[:initial_delay]} seconds initially"
sleep opts[:initial_delay]

loop do
  puts "Sending #{json_items.size} messages!"
  json_items.each do |msg|
    hastur_msg = Hastur::Message.from_hash(msg)
    rc = hastur_msg.transmit(firehose_socket)
    STDERR.puts "Error sending message #{msg.inspect}, rc: #{rc}" unless rc >= 0
    count += 1
  end

  break unless opts[:replay_delay]
  puts "Sleeping #{opts[:replay_delay]} seconds between replays"
  sleep opts[:replay_delay]
end

puts "Finished sending #{count} messages."
