#!/usr/bin/env ruby

require "ffi-rzmq"
require "yajl"
require "multi_json"
require "termite"
require 'trollop'

require "hastur-server/message"
require "hastur-server/util"
require "hastur-server/syndicator"

MultiJson.use :yajl

OPTS = Trollop::options do
  opt :firehose,  "Agent event URI      (SUB)", :default => "tcp://0.0.0.0:8128", :type => String, :multi => true
  opt :workers,   "Worker URI        (ROUTER)", :default => "tcp://0.0.0.0:4944", :type => String
  opt :heartbeat, "Time in seconds to consider worker dead", :default => 300
end

logger = Termite::Logger.new
ctx = ZMQ::Context.new

# Connect to one or more message firehoses on routers/cores
logger.info "Connecting firehose socket to #{OPTS[:firehose]}"
firehose_socket = Hastur::Util.connect_socket(ctx, ZMQ::SUB, OPTS[:firehose], :hwm => 1000)
firehose_socket.setsockopt(ZMQ::SUBSCRIBE, "")

# Connect a control socket for workers to subscribe
logger.info "Binding worker (ROUTER) socket to #{OPTS[:workers]}..."
workers_socket = Hastur::Util.bind_socket(ctx, ZMQ::ROUTER, OPTS[:workers], :hwm => 1000)

def add_subscription(filter, sub_id)
  @subs ||= {}
  @subs_by_name ||= {}
  @subs_by_type ||= {}

  @syndicator ||= Hastur::Syndicator.new

  old_filter = filter
  filter_id = @syndicator.add_filter(filter)
  STDERR.puts "Filter ID: #{filter_id.inspect}"
  filter = @syndicator.filter_for_id(filter_id)

  all_filters = @syndicator.instance_variable_get("@filters")
  STDERR.puts "All Hastur::Syndicator filters: #{all_filters.inspect}"

  name = nil
  type = filter[:type]
  raise "Filter #{filter.inspect} from #{old_filter.inspect} has no type_id!" unless type

  hash = {
    :filter => filter,
    :name => name,
    :type => type
  }

  @subs[sub_id] = hash

  # By-name is most specific.  If a given filter has no name then it
  # needs to be sorted by type.

  if name
    @subs_by_name[name] ||= {}
    @subs_by_name[name][sub_id] = hash
  else
    @subs_by_type[type] ||= {}
    @subs_by_type[type][sub_id] = hash
  end
end

def remove_subscription(sub_id)
  STDERR.puts "Removing subscription: #{sub_id.inspect}"
  hash = @subs[sub_id]
  return unless hash

  @subs_by_name[name] ||= {}
  @subs_by_type[type] ||= {}

  @subs.delete(sub_id)
  @subs_by_type[hash[:type]].delete(sub_id) if hash[:type] && @subs_by_type[hash[:type]]
  @subs_by_name[hash[:name]].delete(sub_id) if hash[:name] && @subs_by_name[hash[:name]]
end

def subscriptions_for_message(message)
  subs = []
  json_payload = message.decode
  name = json_payload[:name]
  if name
    by_name = @subs_by_name[name] if @subs_by_name
    subs += by_name.keys if by_name
  end

  by_type = @subs_by_type[message.envelope.type_id] if @subs_by_type
  subs += by_type.keys if by_type

  subs
end

poller = ZMQ::Poller.new
poller.register_readable(firehose_socket)
poller.register_readable(workers_socket)

# set up signal handlers and hope to be able to get a clean shutdown
%w(INT TERM KILL).each do |sig|
  Signal.trap(sig) do
    @running = false
    Signal.trap(sig, "DEFAULT")
  end
end

workers = {}
subscriptions = {}

logger.info "Entering event loop..."

@running = true
while @running do
  print "."
  rc = poller.poll_nonblock

  if rc < 0
    logger.warn "Not-okay return code when polling: #{Hastur::Util.zmq_error}"
    sleep 0.1
    next
  end

  if poller.readables.include?(workers_socket)
    logger.info "Reading worker socket..."
    message = Hastur::Util.read_strings(workers_socket)
    logger.info "Read message: #{message.inspect}"

    # If a read error occurs, false can be returned
    next unless message

    if message.size == 2 && message[1] == "handshake"
      if workers[message[0]]
        workers[message[0]][:last_heartbeat] = Time.now
      else
        # Assumptions: Supervisor will detect that it needs/wants to start
        # an alerting worker.  It will start that worker.  The worker will
        # send the syndicator a handshake, and then subscriptions.
        workers[message[0]] = {
          :last_heartbeat => Time.now,
          :subscriptions => [],
        }
      end

      # Send back known subscriptions from this worker, basically so
      # that if the syndicator dies and restarts, the worker knows to
      # re-subscribe.
      subs = workers[message[0]][:subscriptions].map { |s| s[:worker_sub_id] }.sort

      # Only really needed on the first one, but we can't be sure
      # whether this is first from the worker's point of view.
      result = Hastur::Util.send_strings(workers_socket, [ message[0], "handshake_confirm", subs.join(",")])

      logger.info "Confirmed handshake, result #{result.inspect}, socket ID #{message[0].inspect}"
    elsif message.size == 4 && message[1] == "subscribe"
      worker_socket_id = message[0]
      sub_id = message[2]
      sub_spec = MultiJson.load(message[3])

      if sub_spec
        workers[worker_socket_id][:subscriptions] << {
          :sub_spec => sub_spec,
          :worker_sub_id => sub_id,
        }
        subscriptions[sub_id] = {
          :sub_spec => sub_spec,
          :worker_sub_id => sub_id,
          :worker => worker_socket_id,
        }

        add_subscription(sub_spec, sub_id)

        result = Hastur::Util.send_strings workers_socket, [ worker_socket_id, "subscription_confirm", sub_id.to_s ]
        logger.info "Sent sub confirmation, result #{result.inspect}"

        logger.info "New worker subscribing on #{worker_socket_id.inspect} to #{sub_spec.inspect}."
      else
        logger.error "Couldn't decode message part: #{message[3]}"
      end
    else
      logger.error "Unrecognized message from worker socket: #{message.inspect}"
    end
  end

  if poller.readables.include?(firehose_socket)
    message = Hastur::Message.recv(firehose_socket)
    to_workers = 0

    logger.info "Receive from Firehose, message #{message.inspect}, try resend"

    sub_ids = subscriptions_for_message(message)

    sub_ids.each do |worker_sub_id|
      to_send = [ subscriptions[worker_sub_id][:worker], worker_sub_id,
                  message.zmq_parts, message.envelope.pack, message.payload ]
      result = Hastur::Util.send_strings(workers_socket, to_send.flatten)
      logger.error "Couldn't send message to worker!" unless result
      to_workers += 1
    end

    logger.info "Message sent to #{to_workers} workers."
  end

  now = Time.now
  @last_sweep ||= now
  if now - @last_sweep > 5.0
    @last_sweep = now
    workers.each do |socket_id, hash|
      if now - hash[:last_heartbeat] > OPTS[:heartbeat]
        logger.info "Expired worker on socket #{socket_id.inspect}, cleaning up"
        hash[:subscriptions].each do |sub_id|
          subscriptions.delete(sub_id)
          remove_subscription(sub_id)
        end
        workers.delete(socket_id)
      end
    end
  end

  sleep 0.1 if poller.readables.empty?
end

logger.info "Exiting"
