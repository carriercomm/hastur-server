<html>
  <head>
    <title>Graphs for Hastur Cassandra Stats</title>

    <!-- <meta http-equiv="refresh" content="5"> -->

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script type="text/javascript" src="http://people.iola.dk/olau/flot/jquery.flot.js"></script>
    <script type="text/javascript" src="http://people.iola.dk/olau/flot/jquery.flot.navigate.js"></script>
    <script type="text/javascript">
    </script>

    <style type="text/css">
    #placeholder .button {
        position: absolute;
        cursor: pointer;
    }
    #placeholder div.button {
        font-size: smaller;
        color: #999;
        background-color: #eee;
        padding: 2px;
    }
    </style>
  </head>
  <body>
    <h1>Graphs for Hastur Cassandra stats </h1>

    <div id="placeholder" style="width:1000px;height:500px"></div>

<script type="text/javascript">
// Eventually we'll have various ways to mess with the
// interval on this and/or pause it
var ajaxGetInterval = false;
var plot = false;
var do_replot = true;
var old_labels = [];

$(function () {

    // Create and Plot Data

    function labelsFromData(data) {
      labels = []
      for(var i = 0; i < data.length; i++) {
        labels.push(data[i].label);
      }
      return labels;
    }

    function labelsEqual(list1, list2) {
      if(list1.length != list2.length) return false;

      for(var i = 0; i < list1.length; i++) {
        if(list1[i] != list2[i]) return false;
      }
      return true;
    }

    function drawWithData(data) {
      var placeholder = $("#placeholder");

      new_labels = labelsFromData(data);
      if(!labelsEqual(new_labels, old_labels)) {
        do_replot = true;
	console.debug("New labels: " + new_labels);
	console.debug("Old labels: " + old_labels);
      }
      old_labels = new_labels;

      // Start with empty data, schedule an AJAX update
      if(do_replot) {
        plot = $.plot(placeholder, data, {
          series: {
            points: { show: true }
          },
          grid: {
            hoverable: true
          },
          xaxis: {
            mode: "time",
            zoomRange: null,
            panRange: null
          },
          yaxis: {
            zoomRange: null,
            panRange: null
          },
          zoom: {
            interactive: true
          },
          pan: {
            interactive: true
          }
        });

        do_replot = false;
      } else {
        plot.setData(data);
        plot.draw();
      }

      // Navigation - Panning and Zooming

      // add zoom out button 
      $('<div class="button" style="right:20px;bottom:100px">zoom out</div>').appendTo(placeholder).click(function (e) {
          e.preventDefault();
          plot.zoomOut();
      });

      // and add panning buttons

      // little helper for taking the repetitive work out of placing
      // panning arrows
      function addArrow(dir, right, bottom, offset) {
          $('<img class="button" src="arrow-' + dir + '.gif" style="right:' + right + 'px;bottom:' + bottom + 'px">').appendTo(placeholder).click(function (e) {
              e.preventDefault();
              plot.pan(offset);
          });
      }

      addArrow('left', 55, 60, { left: -100 });
      addArrow('right', 25, 60, { left: 100 });
      addArrow('up', 40, 75, { top: -100 });
      addArrow('down', 40, 45, { top: 100 });
    }

    function updateGraphData() {
      now = new Date();
      now_ts = now.getTime();
      start_ts = now_ts - 24 * 60 * 60 * 1000;

      // Query for ten minutes later than now.  Normally
      // there shouldn't be any data, but this (more than)
      // accounts for clock skew, request delay and whatnot.
      now_ts += 10 * 60 * 1000;

      $.ajax({
               method: 'get',
               url : '/data?start=' + start_ts + '&end=' + now_ts,
               dataType : 'text',
               success: function (text) { data = eval(text); drawWithData(data); }
              });
    }

    ajaxGetInterval = setInterval(updateGraphData, 1000)
    updateGraphData();

    // Create and Show Tooltips

    function showTooltip(x, y, contents) {
        $('<div id="tooltip">' + contents + '</div>').css( {
            position: 'absolute',
            display: 'none',
            top: y + 5,
            left: x + 5,
            border: '1px solid #fdd',
            padding: '2px',
            'background-color': '#fee',
            opacity: 0.80
        }).appendTo("body").fadeIn(200);
    }
    var previousPoint = null;
    $("#placeholder").bind("plothover", function (event, pos, item) {
        if ($("#enableTooltip:checked").length > 0) {
            if (item) {
                if (previousPoint != item.dataIndex) {
                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = new Date(item.datapoint[0]).toUTCString(),
                        y = item.datapoint[1].toFixed(2);

                    showTooltip(item.pageX, item.pageY,
                                item.series.label + " of " + x + " = " + y);
                }
            }
            else {
                $("#tooltip").remove();
                previousPoint = null;            
            }
        }
    });

});

</script>

    <p><input id="enableTooltip" type="checkbox" checked="checked">Enable tooltip</p>

</body>
</html>
